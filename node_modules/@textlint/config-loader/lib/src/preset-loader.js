"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPreset = void 0;
// LICENSE : MIT
const module_interop_1 = require("@textlint/module-interop");
const utils_1 = require("@textlint/utils");
const is_1 = require("./is");
const import_1 = require("./import");
function loadPreset({ presetName, presetRulesOptions, moduleResolver }) {
    return __awaiter(this, void 0, void 0, function* () {
        const presetPackageName = moduleResolver.resolvePresetPackageName(presetName);
        const mod = yield (0, import_1.dynamicImport)(presetPackageName.filePath);
        const preset = (0, module_interop_1.moduleInterop)(mod.default);
        if (!(0, is_1.isPresetCreator)(preset)) {
            throw new Error(`preset should have rules and rulesConfig: ${presetName}`);
        }
        // we should use preset.rules â†’ some preset use different name actual rule
        return Object.keys(preset.rules).map((ruleId) => {
            var _a;
            const normalizedKey = (0, utils_1.normalizeTextlintPresetSubRuleKey)({ preset: presetName, rule: ruleId });
            return {
                ruleId: normalizedKey,
                rule: preset.rules[ruleId],
                options: (_a = presetRulesOptions[ruleId]) !== null && _a !== void 0 ? _a : preset.rulesConfig[ruleId],
                filePath: presetPackageName.filePath,
                moduleName: presetPackageName.moduleName
            };
        });
    });
}
exports.loadPreset = loadPreset;
//# sourceMappingURL=preset-loader.js.map