var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { rcFile } from "rc-config-loader";
import { TextLintModuleResolver } from "./textlint-module-resolver";
import { loadFilterRules, loadPlugins, loadRules } from "./loader";
/**
 * Load packages in RawConfig and return loaded config object
 * @param options
 */
export const loadPackagesFromRawConfig = (options) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f;
    // TODO: validation
    // Search textlint's module
    const moduleResolver = new TextLintModuleResolver({
        rulesBaseDirectory: options.node_moduleDir
    });
    // rules
    const { rules, rulesError } = yield loadRules({
        rulesObject: (_a = options.rawConfig.rules) !== null && _a !== void 0 ? _a : {},
        moduleResolver,
        testReplaceDefinitions: (_b = options.testReplaceDefinitions) === null || _b === void 0 ? void 0 : _b.rule
    });
    // filterRules
    const { filterRules, filterRulesError } = yield loadFilterRules({
        rulesObject: (_c = options.rawConfig.filters) !== null && _c !== void 0 ? _c : {},
        moduleResolver,
        testReplaceDefinitions: (_d = options.testReplaceDefinitions) === null || _d === void 0 ? void 0 : _d.filterRules
    });
    // plugins
    const { plugins, pluginsError } = yield loadPlugins({
        pluginsObject: (_e = options.rawConfig.plugins) !== null && _e !== void 0 ? _e : {},
        moduleResolver,
        testReplaceDefinitions: (_f = options.testReplaceDefinitions) === null || _f === void 0 ? void 0 : _f.plugins
    });
    if (rulesError) {
        return {
            ok: false,
            error: rulesError
        };
    }
    if (filterRulesError) {
        return {
            ok: false,
            error: filterRulesError
        };
    }
    if (pluginsError) {
        return {
            ok: false,
            error: pluginsError
        };
    }
    const loadedConfig = {
        rules,
        plugins,
        filterRules
    };
    // TODO: after validation
    return {
        ok: true,
        config: loadedConfig
    };
});
/**
 *  Load config file and return config object that is loaded rule instance.
 * @param options
 */
export const loadConfig = (options) => __awaiter(void 0, void 0, void 0, function* () {
    const rawResult = yield loadRawConfig(options);
    if (!rawResult.ok) {
        return {
            ok: false,
            error: rawResult.error
        };
    }
    const packageOptions = {
        rawConfig: rawResult.rawConfig,
        node_moduleDir: options.node_modulesDir,
        testReplaceDefinitions: options.testReplaceDefinitions
    };
    const result = yield loadPackagesFromRawConfig(options.preLoadingPackage ? options.preLoadingPackage(packageOptions) : packageOptions);
    if (!result.ok) {
        return {
            ok: false,
            configFilePath: rawResult.configFilePath,
            error: result.error
        };
    }
    return {
        ok: true,
        config: result.config,
        configFilePath: rawResult.configFilePath,
        rawConfig: rawResult.rawConfig
    };
});
/**
 *  Load config file and return parsed config object that is not loaded rule instance
 *  It is just JSON present for config file. Raw data
 * @param options
 */
export const loadRawConfig = (options) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const results = rcFile("textlint", {
            cwd: options.cwd,
            configFileName: options.configFilePath,
            packageJSON: {
                fieldName: "textlint"
            }
        });
        // Not Found
        if (!results) {
            return {
                ok: false,
                error: {
                    message: "textlint config is not found",
                    errors: [
                        new Error(`textlint config is not found
                
textlint require .textlintrc config file.
The config file define the use of rules.`)
                    ]
                }
            };
        }
        return {
            ok: true,
            rawConfig: results.config,
            configFilePath: results.filePath
        };
    }
    catch (error) {
        return {
            ok: false,
            error: {
                message: "textlint config is not found",
                errors: [error instanceof Error ? error : new Error(String(error))]
            }
        };
    }
});
//# sourceMappingURL=config-loader.js.map