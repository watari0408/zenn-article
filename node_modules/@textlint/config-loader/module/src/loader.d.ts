import { TextLintModuleResolver } from "./textlint-module-resolver";
import { TextlintRcConfig } from "./TextlintRcConfig";
import { TextlintConfigDescriptor } from "./TextlintConfigDescriptor";
export declare const loadPlugins: ({ pluginsObject, moduleResolver, testReplaceDefinitions }: {
    pluginsObject: NonNullable<TextlintRcConfig["plugins"]>;
    parentPresetName?: string | undefined;
    moduleResolver: TextLintModuleResolver;
    testReplaceDefinitions?: import("./TextlintConfigDescriptor").TextlintConfigPlugin[] | undefined;
}) => Promise<{
    plugins: TextlintConfigDescriptor["plugins"];
    pluginsError: null | {
        message: string;
        errors: Error[];
    };
}>;
export declare const loadFilterRules: ({ rulesObject, moduleResolver, testReplaceDefinitions }: {
    rulesObject: NonNullable<TextlintRcConfig["filters"]>;
    moduleResolver: TextLintModuleResolver;
    testReplaceDefinitions?: import("./TextlintConfigDescriptor").TextlintConfigFilterRule[] | undefined;
}) => Promise<{
    filterRules: TextlintConfigDescriptor["filterRules"];
    filterRulesError: null | {
        message: string;
        errors: Error[];
    };
}>;
export declare const loadRules: ({ rulesObject, moduleResolver, testReplaceDefinitions }: {
    rulesObject: NonNullable<TextlintRcConfig["rules"]>;
    moduleResolver: TextLintModuleResolver;
    testReplaceDefinitions?: import("./TextlintConfigDescriptor").TextlintConfigRule[] | undefined;
}) => Promise<{
    rules: TextlintConfigDescriptor["rules"];
    rulesError: null | {
        message: string;
        errors: Error[];
    };
}>;
//# sourceMappingURL=loader.d.ts.map