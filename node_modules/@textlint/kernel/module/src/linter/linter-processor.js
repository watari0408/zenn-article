// LICENSE : MIT
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import LinterTask from "../task/linter-task";
import TaskRunner from "../task/task-runner";
import { invariant } from "../util/invariant";
export default class LinterProcessor {
    /**
     * @param {Processor} processor
     * @param {MessageProcessManager} messageProcessManager
     */
    constructor(processor, messageProcessManager) {
        this.processor = processor;
        this.messageProcessManager = messageProcessManager;
    }
    /**
     * Run linter process
     */
    process({ config, configBaseDir, ruleDescriptors, filterRuleDescriptors, sourceCode }) {
        return __awaiter(this, void 0, void 0, function* () {
            const { preProcess, postProcess } = this.processor.processor(sourceCode.ext);
            invariant(typeof preProcess === "function" && typeof postProcess === "function", "processor should implement {preProcess, postProcess}");
            const task = new LinterTask({
                config,
                ruleDescriptors,
                filterRuleDescriptors,
                sourceCode,
                configBaseDir
            });
            const messages = yield TaskRunner.process(task);
            const result = yield postProcess(messages, sourceCode.filePath);
            result.messages = this.messageProcessManager.process(result.messages);
            if (result.filePath == null) {
                result.filePath = `<Unknown{sourceCode.ext}>`;
            }
            invariant(result.filePath && result.messages.length >= 0, "postProcess should return { messages, filePath } ");
            return result;
        });
    }
}
//# sourceMappingURL=linter-processor.js.map