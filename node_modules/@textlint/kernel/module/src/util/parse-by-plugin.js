var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { isPluginParsedObject } from "./isPluginParsedObject";
/**
 * Parse text by plugin
 * If parse error is occurred, return an Error
 * @param preProcess
 * @param sourceText
 * @param filePath
 */
export const parseByPlugin = ({ preProcess, sourceText, filePath }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const preProcessResult = yield preProcess(sourceText, filePath);
        const isParsedObject = isPluginParsedObject(preProcessResult);
        const textForAST = isParsedObject ? preProcessResult.text : sourceText;
        const ast = isParsedObject ? preProcessResult.ast : preProcessResult;
        return {
            text: textForAST,
            ast
        };
    }
    catch (error) {
        // Parse error
        return error instanceof Error ? error : new Error(String(error));
    }
});
//# sourceMappingURL=parse-by-plugin.js.map