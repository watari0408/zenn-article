// LICENSE : MIT
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFormatterList = exports.createFormatter = exports.loadFormatter = exports.dynamicImport = void 0;
const module_interop_1 = require("@textlint/module-interop");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
// @ts-expect-error
const try_resolve_1 = __importDefault(require("try-resolve"));
// @ts-expect-error
const is_file_1 = __importDefault(require("is-file"));
const debug_1 = __importDefault(require("debug"));
const node_url_1 = require("node:url");
// import() can not load Window file path
// convert file path to file URL before import()
// https://github.com/nodejs/node/issues/31710
function dynamicImport(targetPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileUrl = (0, node_url_1.pathToFileURL)(targetPath).href;
        return import(fileUrl);
    });
}
exports.dynamicImport = dynamicImport;
const debug = (0, debug_1.default)("textlint:@textlint/linter-formatter");
function loadFormatter(formatterConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const formatterName = formatterConfig.formatterName;
        debug(`formatterName: ${formatterName}`);
        let formatter;
        let formatterPath;
        if (fs_1.default.existsSync(formatterName)) {
            formatterPath = formatterName;
        }
        else if (fs_1.default.existsSync(path_1.default.resolve(process.cwd(), formatterName))) {
            formatterPath = path_1.default.resolve(process.cwd(), formatterName);
        }
        else {
            if ((0, is_file_1.default)(`${path_1.default.join(__dirname, "formatters/", formatterName)}.js`)) {
                formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.js`;
            }
            else if ((0, is_file_1.default)(`${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`)) {
                formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`;
            }
            else {
                const pkgPath = (0, try_resolve_1.default)(`textlint-formatter-${formatterName}`) || (0, try_resolve_1.default)(formatterName);
                if (pkgPath) {
                    formatterPath = pkgPath;
                }
            }
        }
        try {
            formatter = (0, module_interop_1.moduleInterop)((yield dynamicImport(formatterPath)).default);
        }
        catch (ex) {
            throw new Error(`Could not find formatter ${formatterName}
${ex}`);
        }
        return {
            format(results) {
                return formatter(results, formatterConfig);
            }
        };
    });
}
exports.loadFormatter = loadFormatter;
/**
 * @deprecated use loadFormatter
 * @param formatterConfig
 */
function createFormatter(formatterConfig) {
    const formatterName = formatterConfig.formatterName;
    debug(`formatterName: ${formatterName}`);
    let formatter;
    let formatterPath;
    if (fs_1.default.existsSync(formatterName)) {
        formatterPath = formatterName;
    }
    else if (fs_1.default.existsSync(path_1.default.resolve(process.cwd(), formatterName))) {
        formatterPath = path_1.default.resolve(process.cwd(), formatterName);
    }
    else {
        if ((0, is_file_1.default)(`${path_1.default.join(__dirname, "formatters/", formatterName)}.js`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.js`;
        }
        else if ((0, is_file_1.default)(`${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`)) {
            formatterPath = `${path_1.default.join(__dirname, "formatters/", formatterName)}.ts`;
        }
        else {
            const pkgPath = (0, try_resolve_1.default)(`textlint-formatter-${formatterName}`) || (0, try_resolve_1.default)(formatterName);
            if (pkgPath) {
                formatterPath = pkgPath;
            }
        }
    }
    try {
        formatter = (0, module_interop_1.moduleInterop)(require(formatterPath));
    }
    catch (ex) {
        throw new Error(`Could not find formatter ${formatterName}
${ex}`);
    }
    return function (results) {
        return formatter(results, formatterConfig);
    };
}
exports.createFormatter = createFormatter;
function getFormatterList() {
    return fs_1.default
        .readdirSync(path_1.default.join(__dirname, "formatters"))
        .filter((file) => {
        return path_1.default.extname(file) === ".js";
    })
        .map((file) => {
        return { name: path_1.default.basename(file, ".js") };
    });
}
exports.getFormatterList = getFormatterList;
//# sourceMappingURL=index.js.map