// LICENSE : MIT
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { moduleInterop } from "@textlint/module-interop";
import fs from "fs";
import path from "path";
// @ts-expect-error
import tryResolve from "try-resolve";
// @ts-expect-error
import isFile from "is-file";
import debug0 from "debug";
import { pathToFileURL } from "node:url";
// import() can not load Window file path
// convert file path to file URL before import()
// https://github.com/nodejs/node/issues/31710
export function dynamicImport(targetPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileUrl = pathToFileURL(targetPath).href;
        return import(fileUrl);
    });
}
const debug = debug0("textlint:@textlint/linter-formatter");
export function loadFormatter(formatterConfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const formatterName = formatterConfig.formatterName;
        debug(`formatterName: ${formatterName}`);
        let formatter;
        let formatterPath;
        if (fs.existsSync(formatterName)) {
            formatterPath = formatterName;
        }
        else if (fs.existsSync(path.resolve(process.cwd(), formatterName))) {
            formatterPath = path.resolve(process.cwd(), formatterName);
        }
        else {
            if (isFile(`${path.join(__dirname, "formatters/", formatterName)}.js`)) {
                formatterPath = `${path.join(__dirname, "formatters/", formatterName)}.js`;
            }
            else if (isFile(`${path.join(__dirname, "formatters/", formatterName)}.ts`)) {
                formatterPath = `${path.join(__dirname, "formatters/", formatterName)}.ts`;
            }
            else {
                const pkgPath = tryResolve(`textlint-formatter-${formatterName}`) || tryResolve(formatterName);
                if (pkgPath) {
                    formatterPath = pkgPath;
                }
            }
        }
        try {
            formatter = moduleInterop((yield dynamicImport(formatterPath)).default);
        }
        catch (ex) {
            throw new Error(`Could not find formatter ${formatterName}
${ex}`);
        }
        return {
            format(results) {
                return formatter(results, formatterConfig);
            }
        };
    });
}
/**
 * @deprecated use loadFormatter
 * @param formatterConfig
 */
export function createFormatter(formatterConfig) {
    const formatterName = formatterConfig.formatterName;
    debug(`formatterName: ${formatterName}`);
    let formatter;
    let formatterPath;
    if (fs.existsSync(formatterName)) {
        formatterPath = formatterName;
    }
    else if (fs.existsSync(path.resolve(process.cwd(), formatterName))) {
        formatterPath = path.resolve(process.cwd(), formatterName);
    }
    else {
        if (isFile(`${path.join(__dirname, "formatters/", formatterName)}.js`)) {
            formatterPath = `${path.join(__dirname, "formatters/", formatterName)}.js`;
        }
        else if (isFile(`${path.join(__dirname, "formatters/", formatterName)}.ts`)) {
            formatterPath = `${path.join(__dirname, "formatters/", formatterName)}.ts`;
        }
        else {
            const pkgPath = tryResolve(`textlint-formatter-${formatterName}`) || tryResolve(formatterName);
            if (pkgPath) {
                formatterPath = pkgPath;
            }
        }
    }
    try {
        formatter = moduleInterop(require(formatterPath));
    }
    catch (ex) {
        throw new Error(`Could not find formatter ${formatterName}
${ex}`);
    }
    return function (results) {
        return formatter(results, formatterConfig);
    };
}
export function getFormatterList() {
    return fs
        .readdirSync(path.join(__dirname, "formatters"))
        .filter((file) => {
        return path.extname(file) === ".js";
    })
        .map((file) => {
        return { name: path.basename(file, ".js") };
    });
}
//# sourceMappingURL=index.js.map