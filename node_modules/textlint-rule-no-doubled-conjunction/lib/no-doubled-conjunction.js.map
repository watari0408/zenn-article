{"version":3,"file":"no-doubled-conjunction.js","names":["context","options","helper","RuleHelper","Syntax","report","RuleError","Paragraph","node","isChildNode","Link","Image","BlockQuote","Emphasis","source","StringSource","text","toString","isSentenceNode","type","SentenceSyntax","Sentence","sentences","splitSentences","SeparatorParser","separatorCharacters","filter","length","selectConjenction","sentence","tokens","tokenize","raw","conjunctionTokens","token","index","prevToken","pos_detail_1","pos","prev_token","Promise","all","map","then","result","reduce","prev","current","current_tokens","prev_sentence","prev_tokens","surface_form","conjunctionSurface","originalIndex","originalIndexFromPosition","line","loc","start","column","word_position","padding"],"sources":["../src/no-doubled-conjunction.js"],"sourcesContent":["// LICENSE : MIT\n\"use strict\";\nimport { RuleHelper } from \"textlint-rule-helper\";\nimport { tokenize } from \"kuromojin\";\nimport { split as splitSentences, Syntax as SentenceSyntax } from \"sentence-splitter\";\nimport { StringSource } from \"textlint-util-to-string\";\n\n/*\n    1. Paragraph Node -> text\n    2. text -> sentences\n    3. tokenize sentence\n    4. report error if found word that match the rule.\n\n    TODO: need abstraction\n */\nexport default function (context, options = {}) {\n    const helper = new RuleHelper(context);\n    const { Syntax, report, RuleError } = context;\n    return {\n        [Syntax.Paragraph](node) {\n            if (helper.isChildNode(node, [Syntax.Link, Syntax.Image, Syntax.BlockQuote, Syntax.Emphasis])) {\n                return;\n            }\n            const source = new StringSource(node);\n            const text = source.toString();\n            const isSentenceNode = (node) => node.type === SentenceSyntax.Sentence;\n            const sentences = splitSentences(text, {\n                SeparatorParser: {\n                    separatorCharacters: [\n                        \".\", // period\n                        \"．\", // (ja) zenkaku-period\n                        \"。\", // (ja) 句点\n                        \"?\", // question mark\n                        \"!\", //  exclamation mark\n                        \"？\", // (ja) zenkaku question mark\n                        \"！\" // (ja) zenkaku exclamation mark\n                    ]\n                }\n            }).filter(isSentenceNode);\n            // if not have a sentence, early return\n            // It is for avoiding error of emptyArray.reduce().\n            if (sentences.length === 0) {\n                return;\n            }\n            const selectConjenction = async (sentence) => {\n                const tokens = await tokenize(sentence.raw);\n                const conjunctionTokens = tokens.filter((token, index) => {\n                    const prevToken = tokens[index - 1];\n                    // スペースが切れ目として認識されてしまう問題を回避\n                    // https://github.com/textlint-ja/textlint-rule-no-doubled-conjunction/issues/14\n                    if (prevToken && prevToken.pos_detail_1 === \"空白\" && token.pos === \"接続詞\") {\n                        return false;\n                    }\n                    return token.pos === \"接続詞\"\n                });\n                return [sentence, conjunctionTokens];\n            }\n            let prev_token = null;\n            return Promise.all(sentences.map(selectConjenction)).then((result) => result.reduce((prev, current) => {\n                const [sentence, current_tokens] = current;\n                const [prev_sentence, prev_tokens] = prev;\n                let token = prev_token;\n                if (prev_tokens && prev_tokens.length > 0) {\n                    token = prev_tokens[0];\n                }\n                if (current_tokens.length > 0) {\n                    if (token && current_tokens[0].surface_form === token.surface_form) {\n                        const conjunctionSurface = token.surface_form;\n                        const originalIndex = source.originalIndexFromPosition({\n                            line: sentence.loc.start.line,\n                            column: sentence.loc.start.column + (current_tokens[0].word_position - 1)\n                        });\n                        // padding position\n                        const padding = {\n                            index: originalIndex\n                        };\n                        report(node, new RuleError(`同じ接続詞（${conjunctionSurface}）が連続して使われています。`, padding));\n                    }\n                }\n                prev_token = token;\n                return current;\n            }));\n        }\n    }\n};\n"],"mappings":"AAAA;AACA;;;;;;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,kBAAUA,OAAV,EAAiC;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EAC5C,IAAMC,MAAM,GAAG,IAAIC,8BAAJ,CAAeH,OAAf,CAAf;EACA,IAAM;IAAEI,MAAF;IAAUC,MAAV;IAAkBC;EAAlB,IAAgCN,OAAtC;EACA,OAAO;IACH,CAACI,MAAM,CAACG,SAAR,EAAmBC,IAAnB,EAAyB;MACrB,IAAIN,MAAM,CAACO,WAAP,CAAmBD,IAAnB,EAAyB,CAACJ,MAAM,CAACM,IAAR,EAAcN,MAAM,CAACO,KAArB,EAA4BP,MAAM,CAACQ,UAAnC,EAA+CR,MAAM,CAACS,QAAtD,CAAzB,CAAJ,EAA+F;QAC3F;MACH;;MACD,IAAMC,MAAM,GAAG,IAAIC,kCAAJ,CAAiBP,IAAjB,CAAf;MACA,IAAMQ,IAAI,GAAGF,MAAM,CAACG,QAAP,EAAb;;MACA,IAAMC,cAAc,GAAIV,IAAD,IAAUA,IAAI,CAACW,IAAL,KAAcC,wBAAA,CAAeC,QAA9D;;MACA,IAAMC,SAAS,GAAG,IAAAC,uBAAA,EAAeP,IAAf,EAAqB;QACnCQ,eAAe,EAAE;UACbC,mBAAmB,EAAE,CACjB,GADiB,EACZ;UACL,GAFiB,EAEZ;UACL,GAHiB,EAGZ;UACL,GAJiB,EAIZ;UACL,GALiB,EAKZ;UACL,GANiB,EAMZ;UACL,GAPiB,CAOb;UAPa;QADR;MADkB,CAArB,EAYfC,MAZe,CAYRR,cAZQ,CAAlB,CAPqB,CAoBrB;MACA;;MACA,IAAII,SAAS,CAACK,MAAV,KAAqB,CAAzB,EAA4B;QACxB;MACH;;MACD,IAAMC,iBAAiB;QAAA,6BAAG,WAAOC,QAAP,EAAoB;UAC1C,IAAMC,MAAM,SAAS,IAAAC,mBAAA,EAASF,QAAQ,CAACG,GAAlB,CAArB;UACA,IAAMC,iBAAiB,GAAGH,MAAM,CAACJ,MAAP,CAAc,CAACQ,KAAD,EAAQC,KAAR,KAAkB;YACtD,IAAMC,SAAS,GAAGN,MAAM,CAACK,KAAK,GAAG,CAAT,CAAxB,CADsD,CAEtD;YACA;;YACA,IAAIC,SAAS,IAAIA,SAAS,CAACC,YAAV,KAA2B,IAAxC,IAAgDH,KAAK,CAACI,GAAN,KAAc,KAAlE,EAAyE;cACrE,OAAO,KAAP;YACH;;YACD,OAAOJ,KAAK,CAACI,GAAN,KAAc,KAArB;UACH,CARyB,CAA1B;UASA,OAAO,CAACT,QAAD,EAAWI,iBAAX,CAAP;QACH,CAZsB;;QAAA,gBAAjBL,iBAAiB;UAAA;QAAA;MAAA,GAAvB;;MAaA,IAAIW,UAAU,GAAG,IAAjB;MACA,OAAOC,OAAO,CAACC,GAAR,CAAYnB,SAAS,CAACoB,GAAV,CAAcd,iBAAd,CAAZ,EAA8Ce,IAA9C,CAAoDC,MAAD,IAAYA,MAAM,CAACC,MAAP,CAAc,CAACC,IAAD,EAAOC,OAAP,KAAmB;QACnG,IAAM,CAAClB,QAAD,EAAWmB,cAAX,IAA6BD,OAAnC;QACA,IAAM,CAACE,aAAD,EAAgBC,WAAhB,IAA+BJ,IAArC;QACA,IAAIZ,KAAK,GAAGK,UAAZ;;QACA,IAAIW,WAAW,IAAIA,WAAW,CAACvB,MAAZ,GAAqB,CAAxC,EAA2C;UACvCO,KAAK,GAAGgB,WAAW,CAAC,CAAD,CAAnB;QACH;;QACD,IAAIF,cAAc,CAACrB,MAAf,GAAwB,CAA5B,EAA+B;UAC3B,IAAIO,KAAK,IAAIc,cAAc,CAAC,CAAD,CAAd,CAAkBG,YAAlB,KAAmCjB,KAAK,CAACiB,YAAtD,EAAoE;YAChE,IAAMC,kBAAkB,GAAGlB,KAAK,CAACiB,YAAjC;YACA,IAAME,aAAa,GAAGvC,MAAM,CAACwC,yBAAP,CAAiC;cACnDC,IAAI,EAAE1B,QAAQ,CAAC2B,GAAT,CAAaC,KAAb,CAAmBF,IAD0B;cAEnDG,MAAM,EAAE7B,QAAQ,CAAC2B,GAAT,CAAaC,KAAb,CAAmBC,MAAnB,IAA6BV,cAAc,CAAC,CAAD,CAAd,CAAkBW,aAAlB,GAAkC,CAA/D;YAF2C,CAAjC,CAAtB,CAFgE,CAMhE;;YACA,IAAMC,OAAO,GAAG;cACZzB,KAAK,EAAEkB;YADK,CAAhB;YAGAhD,MAAM,CAACG,IAAD,EAAO,IAAIF,SAAJ,+CAAuB8C,kBAAvB,2FAA2DQ,OAA3D,CAAP,CAAN;UACH;QACJ;;QACDrB,UAAU,GAAGL,KAAb;QACA,OAAOa,OAAP;MACH,CAvBqE,CAA/D,CAAP;IAwBH;;EAhEE,CAAP;AAkEH;;AAAA"}