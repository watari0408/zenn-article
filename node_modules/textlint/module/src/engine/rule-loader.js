"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { moduleInterop } from "@textlint/module-interop";
import * as fs from "fs";
import * as path from "path";
import { pathToFileURL } from "node:url";
// import() can not load Window file path
// convert file path to file URL before import()
// https://github.com/nodejs/node/issues/31710
export function dynamicImport(targetPath) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileUrl = pathToFileURL(targetPath).href;
        return import(fileUrl);
    });
}
/**
 * Load all rule modules from specified directory.
 * These are filtered by [extname]
 * @param {String} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`.
 * @param {String | String[]} [extnames] extension names
 * @returns {Object} Loaded rule modules by rule ids (file names).
 */
export function loadFromDir(rulesDir, extnames = [".js", ".ts"]) {
    let rulesDirAbsolutePath;
    if (!rulesDir) {
        rulesDirAbsolutePath = path.join(__dirname, "rules");
    }
    else {
        rulesDirAbsolutePath = path.resolve(process.cwd(), rulesDir);
    }
    const rules = Object.create(null);
    fs.readdirSync(rulesDirAbsolutePath).forEach((file) => {
        if (Array.isArray(extnames)) {
            if (!extnames.includes(path.extname(file))) {
                return;
            }
        }
        else {
            if (path.extname(file) !== extnames) {
                return;
            }
        }
        const withoutExt = path.basename(file, path.extname(file));
        rules[withoutExt] = moduleInterop(require(path.join(rulesDirAbsolutePath, file)));
    });
    return rules;
}
export function loadFromDirAsESM(rulesDir, extnames = [".js", ".ts"]) {
    return __awaiter(this, void 0, void 0, function* () {
        let rulesDirAbsolutePath;
        if (!rulesDir) {
            rulesDirAbsolutePath = path.join(__dirname, "rules");
        }
        else {
            rulesDirAbsolutePath = path.resolve(process.cwd(), rulesDir);
        }
        const files = yield fs.promises.readdir(rulesDirAbsolutePath);
        const ruleFiles = files.filter((file) => {
            if (Array.isArray(extnames)) {
                if (!extnames.includes(path.extname(file))) {
                    return false;
                }
            }
            else {
                if (path.extname(file) !== extnames) {
                    return false;
                }
            }
            return true;
        });
        return Promise.all(ruleFiles.map((ruleFile) => __awaiter(this, void 0, void 0, function* () {
            const withoutExt = path.basename(ruleFile, path.extname(ruleFile));
            const mod = yield dynamicImport(path.join(rulesDirAbsolutePath, ruleFile));
            const ruleModule = moduleInterop(mod.default);
            const ret = {
                rule: ruleModule,
                ruleId: withoutExt,
                options: true
            };
            return ret;
        })));
    });
}
//# sourceMappingURL=rule-loader.js.map