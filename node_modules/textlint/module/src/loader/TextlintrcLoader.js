var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { loadConfig } from "@textlint/config-loader";
import { TextlintKernelDescriptor } from "@textlint/kernel";
import path from "node:path";
import textPlugin from "@textlint/textlint-plugin-text";
import markdownPlugin from "@textlint/textlint-plugin-markdown";
import debug_ from "debug";
const debug = debug_("textlint:loader:TextlintrcLoader");
// Built-in plugins should be loaded from same directory with `textlint` package
export const builtInPlugins = [
    {
        pluginId: "@textlint/textlint-plugin-text",
        plugin: textPlugin,
        options: true
    },
    {
        pluginId: "@textlint/textlint-plugin-markdown",
        plugin: markdownPlugin,
        options: true
    }
];
export const loadBuiltinPlugins = () => __awaiter(void 0, void 0, void 0, function* () {
    return new TextlintKernelDescriptor({
        rules: [],
        filterRules: [],
        plugins: builtInPlugins
    });
});
export const loadTextlintrc = ({ configFilePath, node_modulesDir }) => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield loadConfig({
        configFilePath,
        node_modulesDir
    });
    if (!result.ok) {
        debug("loadTextlintrc failed: %o", result);
        return loadBuiltinPlugins();
    }
    const { rules, plugins, filterRules } = result.config;
    return new TextlintKernelDescriptor({
        rules,
        plugins: [...builtInPlugins, ...plugins],
        filterRules,
        configBaseDir: path.dirname(result.configFilePath)
    });
});
//# sourceMappingURL=TextlintrcLoader.js.map